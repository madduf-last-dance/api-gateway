name: CI/CD Pipeline

on:
  push:
    branches:
      - feature/kubernetes

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Minikube
      uses: medyagh/setup-minikube@master

    - name: Start Minikube
      run: minikube start --driver=docker

    - name: Create Kaniko secret
      run: |
        kubectl create secret docker-registry regcred \
          --docker-server=https://index.docker.io/v1/ \
          --docker-username=${{ secrets.DOCKER_USERNAME }} \
          --docker-password=${{ secrets.DOCKER_PASSWORD }} \
          --docker-email=${{ secrets.DOCKER_EMAIL }}

    - name: Create workspace directory in Minikube
      run: |
        minikube ssh -- sudo mkdir -p /workspace

    - name: Copy code to Minikube workspace
      run: |
        minikube cp ./Dockerfile /workspace/

    - name: Create Kaniko Job to build the image and to push the image to dockerhub
      run: |
        cat <<EOF | kubectl apply -f -
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: kaniko-job
        spec:
          template:
            spec:
              containers:
              - name: kaniko
                image: gcr.io/kaniko-project/executor:latest
                args:
                - --dockerfile=/workspace/Dockerfile
                - --context=dir://workspace
                - --destination=${{ secrets.DOCKER_REGISTRY }}/api-gateway:latest
                volumeMounts:
                - name: kaniko-secret
                  mountPath: /kaniko/.docker
              restartPolicy: Never
              volumes:
              - name: kaniko-secret
                secret:
                  secretName: regcred
                  items:
                  - key: .dockerconfigjson
                    path: config.json
        EOF

    - name: Get Kaniko Job Events (if job fails)
      run: |
        kubectl events

    - name: Get Kaniko Job Events (if job fails)
      run: |
        kubectl events

    - name: Wait for Kaniko Job to finish
      run: |
        kubectl wait --for=condition=complete job/kaniko-job --timeout=30s

    - name: Get Kaniko Job Events (if job fails)
      run: |
        kubectl events

    - name: Get Kaniko Job Events for kaniko-job (if job fails)
      if: failure()
      run: |
        kubectl get events --field-selector involvedObject.name=kaniko-job

    - name: Describe Kaniko Job (if job fails)
      if: failure()
      run: |
        kubectl describe job kaniko-job

    - name: Clean up Kaniko Job
      run: |
        kubectl delete job kaniko-job
